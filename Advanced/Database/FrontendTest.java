import sales.client.*;

class FrontendTest{

	public static void main(String[] args) throws Exception{
		OrderInfo order = new OrderInfo();							// Check point 1.
		order.setCustomerId(args[0].toUpperCase());						// Check point 2.
		order.setProductNo(Integer.parseInt(args[1]));
		order.setQuantity(Integer.parseInt(args[2]));
		OrderManagerService service = new OrderManagerService();				// check point 3.
		OrderManager client = service.getOrderManagerPort();					// Check point 4.
		try{
			int orderNo = client.placeOrder(order);						// Check point 6.
			System.out.printf("New Order Number: %d%n", orderNo);
		}catch(Exception e){
			System.out.println("Order Failed!");
		}
	}
}

/* comments about this programme :-

What is the use of  wsimport :-
	The wsimport command-line tool supports the top-down approach to developing JAX-WS Web services. When you start with 
	an existing WSDL file, use the wsimport command-line tool to generate the required JAX-WS portable artifacts.

wsimport -p sales.client http://fedguest:8056/orderManager?wsdl
	With the help of this command we are creating a lot of required JAX-WS portable artifacts.

POINTS :-
	1. We are creating the object of OrderInfo which is inside sales.client package.
	2. We are calling the method setCustomerId(), setProductNo(), setQuantity() etc ...
	3. We are creating the object of OrderManagerService getting the object of service which we published (in MiddleTier.java)
	    OrderManagerService class is inside sales.client which generated by wsimport tool.

	4. Here we are getting the service port.
	5. Here are calling the placeOrder() method from  given port object.

	We created a public data-member in OrderInfo.java inside sales package so by wsimport tool we will get setter getter method
	in OrderInfo.class of sales.client package.
*/